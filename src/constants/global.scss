@import './variable.scss';

@function strip-unit($value){
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size){
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4{
        &{
            font-size: $min-font-size;

            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{stip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }

            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

$min_width: 1280px;
$max_width: 1920px;
$min_font: 12px;
$max_font: 16px;

html { 
    @include fluid-type($min_width, $max_width, $min_font, $max_font);
}

@mixin rem-fallback($property, $values...){
    $max: length($values);
    $remValues: '';

    @for $i from 1 through $max{
        $value: nth($values) / 16;
        $remValues: #{$remValues + $value}rem;
        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }
    #{$property}: $remValues;
}

h1{
    font-size: 4rem!important;
   // font-family: $sfpro-regular;
}

h2{
    font-size: 3rem !important;
}

h3{
    font-size: 2rem !important;
}

h4{
    font-size: 1.75rem!important;
}

h5{
    font-size: 1.5rem !important;
}

h6{
    font-size: 1.25rem !important;
}